<project name="ant-builds" default='all' basedir="." >
  
   <!-- 
    First define properties, datatypes, and default tasks; then define targets.
    Any Ant tasks placed outside of any target are always executed first.
   -->  
  
  <!-- Override default property values with an external properties file, if present. -->
  <property file='build.properties'/>

  <!-- Default property values, if not overridden elsewhere: -->
  <property name='build' location='build' />
  <property name='app.version' value='1.1.0'/>
  <property name='app.name' value='Jet Remote'/>
  <property name='distro-name' value='jet-remote-${app.version}'/>
  <tstamp><format property='build.time' pattern='yyyy-MM-dd HH:mm:ss'/></tstamp>

  <path id='compile.classpath'>
    <fileset dir='lib'>
       <include name='*.jar'/>
    </fileset>
  </path>

  <!-- Simply extends the compile.classpath with your own compiled classes. -->
  <path id='run.classpath'>
    <path refid='compile.classpath'/>
    <path location='src'/>
  </path>
  
  <fileset id='class.files' dir='src'>
     <include name='**/*.class'/>
  </fileset>

  <fileset id='files.for.jar' dir='src'>
    <exclude name='**/*.java'/>
    <exclude name='**/doc-files/'/>
  </fileset>
  
  <!-- Text files using Ant's '@' syntax are here called template files. -->
  <fileset id='template.files' dir='.'>
    <include name='**/*_template.*'/>
  </fileset>

  
  <echo>
    Application: ${app.name} ${app.version}
    Build File : ${ant.file} 
    Run Date   : ${build.time}
    Run by     : ${user.name}
    Build Dir  : ${build}
    Base Dir   : ${basedir}
    Java Home  : ${java.home}
  </echo>
    
  <echo message='Create build directory, and its subdirectories.'/>
  <mkdir dir="${build}/javadoc"/>
  <mkdir dir="${build}/dist"/>
  <mkdir dir="${build}/templates"/>

  <!-- Now define the targets, which use the properties and datatypes defined above. -->

   <target name='clean' description="Delete all build artifacts." >
     <delete dir='${build}'/>
     <delete>
      <fileset refid='class.files'/>
     </delete>
     <mkdir dir="${build}/javadoc"/>
     <mkdir dir="${build}/dist"/>
     <mkdir dir="${build}/templates"/>
   </target>
  
   <target name='compile' description='Compile source files and place beside source.'>
     <javac srcdir="src">   
       <classpath refid='compile.classpath'/>
     </javac>
     <!-- Here's a simple way of debugging a path, fileset, or patternset, using its refid: -->
     <echo>Classpath: ${toString:compile.classpath}</echo>
   </target> 
  
   <target name='launch' description='Build and run the program.' depends='compile'>
     <java classname='hirondelle.ante.Launcher' classpathref='run.classpath' failonerror='true'>
       <arg value="Solar System"/>
     </java>
   </target>
  
   <target name='jar' description='Create a jar file for distribution.' depends='compile'>
    <jar destfile='${build}/dist/${distro-name}.jar' manifest='MANIFEST.MF' duplicate='preserve'>
      <fileset refid='files.for.jar'/>
      <!-- The static manifest.mf file is merged with additional dynamic items, specified here : -->
      <manifest>
        <attribute name='Specification-Version' value='${app.version}'/> 
        <attribute name='Specification-Title' value='${app.name}' />
        <attribute name='Implementation-Version' value='${app.version}'/> 
        <attribute name='Implementation-Title' value='${app.name}' />
      </manifest>
    </jar>
   </target>
  
  <target name='javadoc' description='Generate javadoc.' >
    <javadoc  
      use='true' author='true'  version='true'
      overview='overview.html'  
      access='package' 
      sourcepath='src'
      packagenames='*.*' 
      destdir='${build}/javadoc'
      windowtitle='${app.name} ${app.version}'
      noqualifier='java.*:javax.*:com.sun.*'   
      linksource='true'
    >
      <classpath refid='compile.classpath'/>
      <link href='http://java.sun.com/javase/8/docs/api/'/>      
      <header><![CDATA[<h1>${app.name} ${app.version}</h1>]]></header>
    </javadoc>
  </target>
  
  <target name='text-templates' description='Process template files, and assign values to @ variables.'>
    <copy overwrite='true' todir='${build}/templates'>
      <fileset refid='template.files'/>       
      <!-- New files have 'template' removed from their name : -->      
      <globmapper from='*_template.txt' to='*.txt'/>
      <filterset>
        <filter token='app.name' value='${app.name}'/>
        <filter token='app.version' value='${app.version}'/>
        <filter token='build.time' value='${build.time}'/>
      </filterset>
    </copy>
  </target>
  
  <target name='distro-binary' description='Create zip file with executable jar, docs.' depends='jar, javadoc, text-templates'>
    <zip destfile='${build}/dist/${distro-name}-binary.zip' duplicate='preserve'>
      <zipfileset dir='${build}/dist/' includes='${distro-name}.jar'/>
      <zipfileset dir='${build}/javadoc' prefix='javadoc' />
      <zipfileset dir='${build}/templates' includes='README.txt'/>
    </zip>
  </target>
  
  <target name='distro-source' description='Create zip file with project source code.'>
    <zip destfile='${build}/dist/${distro-name}-src.zip' duplicate='preserve' >
      <!-- exclude items specific to the author's IDE setup: -->
      <zipfileset dir='.' excludes='.classpath, .project'/>
    </zip>
  </target>
  
  <target name='all' description='Create all build artifacts.' 
             depends='clean, compile, jar, javadoc, distro-binary, distro-source'>
    <echo>Finished creating all build artifacts.</echo>
  </target>
  
</project>